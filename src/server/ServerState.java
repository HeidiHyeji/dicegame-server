package server;import java.io.*;import DAO.DG_MemberDAO;import DiceModel.DiceGame;import DiceModel.HighScore;import DiceModel.Player;import DiceView.ServerFrame;import ocsf.server.*;import common.*;public class ServerState extends AbstractServer {	final public static int DEFAULT_PORT = 5555;	ChatIF serverUI;	DiceGame diceGame = null;	private boolean closing = false;	Player player;	HighScore highScore;	DG_MemberDAO dao;	String userID = null; // 로그인&회원가입시 유저 아이디	String userPW = null; // 로그인&회원가입시 유저 비밀번호	String userName = null; // 회원가입시 유저 이름	// MemberProc pro;	public ServerState(int port, ChatIF serverUI) throws IOException {		super(port);		this.serverUI = serverUI;		listen();		dao = new DG_MemberDAO();		diceGame = new DiceGame();		player = new Player();		player.setName();		highScore = new HighScore();		// pro=new MemberProc();	}	// 클라이언트한테 받은 메시지 (김솔이가 바꾼 메소드 토큰으로 쪽개서 경우 나눔)	public void handleMessageFromClient(Object msg, ConnectionToClient client) {		String[] values = ((String) msg).split(" ");// 공백으로 토큰쪼개기		String command = (String) msg;// 클라이언트로부터 온 메시지		serverUI.display("Message: \"" + values[0] + "\" from " + userID);		if (command.equals("연결")) {			ServerFrame.getInstance().display("클라이언트가 연결 하였습니다." + "\r\n");			// 여기서 서버 아이피, 포트 확인해줘야하는줄 알았는데 아니고 어디선가 해줌 아직 못찾음..		}		// 로그인했을때 오는 스트링 토큰 쪼개면 0-"로그인", 1-아이디 , 2-비밀번호		if (values[0].equals("로그인")) { // 맞는 아이디 비밀번호인지 확인해줘야함			userID = values[1]; // 아이디 세팅			userPW = values[2]; // 비밀번호 세팅			if (dao.isMember(userID, userPW)) {				ServerFrame.getInstance().display(userID + "님이 로그인 하였습니다." + "\r\n");				serverUI.display(userID + "님이 로그인");				try {					client.sendToClient("로그인완료");				} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			} else {// DB에 로그인 정보가 없다면				serverUI.display("가입되어 있지 않은 정보입니다.");				ServerFrame.getInstance().display("가입되어 있지 않은 정보입니다." + "\r\n");				try {					client.sendToClient("로그인불가");				} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			}		} // 가입시 오는 스트링 토큰 0-가입 1-아이디 2-비밀번호 3-이름		if (values[0].equals("가입")) {			userID = values[1];			userPW = values[2];			userName = values[3];			// 디비에서 원래 있는 아이디 인지 확인하고..			if(dao.isMember(userID, userPW)){				try {					client.sendToClient("가입불가");				} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			}			else{				dao.insertMember(userID, userPW, userName);			}			try {				serverUI.display(userID + "님이 새롭게 가입되었습니다." + "\r\n");				ServerFrame.getInstance().display(userID + "님이 새롭게 가입되었습니다." + "\r\n");				client.sendToClient("가입완료");			} catch (IOException exc) {							}					}		// 로그인 되있다면 다		else {			if (command.startsWith("게임시작")) {// 클라이언트에서 시작안에 굴리기가 있어야함!				diceGame.diceGameReset();				ServerFrame.getInstance().display("시작버튼을 눌렀습니다.\n");				this.sendToOneClient(userID, "게임준비완료");				player.setName(userID);			}			if (command.equals("굴리기")) {				diceGame.play();				String result = "굴리기완료 " + diceGame.getScore() + " " + diceGame.turn + " " + diceGame.die1.faceValue						+ " " + diceGame.die2.faceValue + " ";				ServerFrame.getInstance().display("굴리기버튼을 눌렀습니다.\n");				System.out.println(result);				// this.sendToOneClient(userID,"굴리기완료");				try {					client.sendToClient(result);				} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			}			if (command.startsWith("로그아웃")) {				ServerFrame.getInstance().display("로그아웃버튼을 눌렀습니다.\n");				this.clientDisconnected(client);			}			if (command.startsWith("나가기")) {				ServerFrame.getInstance().display(userID+"님이 게임을 나갔습니다." + "\r\n");			}			if (command.startsWith("최고점수")) {				// try {				ServerFrame.getInstance().display("최고 점수버튼을 눌렀습니다.\n");				String listmember = highScore.exportListMember();				System.out.print(listmember);				try {					client.sendToClient("최고점수리스트@" + listmember + "@");				} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			}			if(command.startsWith("게임종료")){				serverUI.display(userID + "님이 게임을 종료하였습니다." + "\r\n");				ServerFrame.getInstance().display(userID + "님이 게임을 종료하였습니다." + "\r\n");				diceGame.setScore();				diceGame.diceGameReset();			}		}	}	public void sendToOneClient(String userID, Object msg) {		Thread[] clientThreadList = getClientConnections();		ConnectionToClient client;		String str;		for (int i = 0; i < clientThreadList.length; i++) {			client = (ConnectionToClient) clientThreadList[i];			str = (String) client.getInfo("userID");			if (userID.equals(str))				try {					((ConnectionToClient) clientThreadList[i]).sendToClient(msg);				} catch (IOException e) {					System.out.print("전송실패");				}		}	}	public void quit() {		try {			closing = true;			sendToAllClients("Server is quitting.");			sendToAllClients("You will be disconnected.");			close();		} catch (IOException e) {		}		System.exit(0);	}	protected void serverStarted() {		if (getNumberOfClients() != 0)			sendToAllClients("Server has restarted accepting connections.");		ServerFrame.getInstance().serverTa.setText("Server listening for connections on port " + getPort() + "\r\n");		serverUI.display("Server listening for connections on port " + getPort());	}	protected void serverStopped() {		ServerFrame.getInstance().display("Server has stopped listening for connections." + "\r\n");		serverUI.display("Server has stopped listening for connections.");		sendToAllClients("WARNING - Server has stopped accepting clients.");	}	protected void serverClosed() {		ServerFrame.getInstance().display("Server is closed." + "\r\n");		serverUI.display("Server is closed.");	}	protected void clientConnected(ConnectionToClient client) {		ServerFrame.getInstance().display("A new client is attempting to connect " + "to the server." + "\r\n");		serverUI.display("A new client is attempting to connect " + "to the server.");	}	protected void clientDisconnected(ConnectionToClient client) {		disconnectionNotify(client);	}	synchronized protected void clientException(ConnectionToClient client, Throwable exception) { // ?우앗																									// 이게																									// 뭐야		disconnectionNotify(client);	}	private void disconnectionNotify(ConnectionToClient client) {		// Only notify other clients after the client has logged on		if (client.getInfo("userID") != null) {			try {				client.sendToClient(client.getInfo("userID") + " has disconnected.");			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}			ServerFrame.getInstance().display("" + client.getInfo("userID") + " has disconnected." + "\r\n");			serverUI.display(client.getInfo("userID") + " has disconnected.");		}	}}